@model DataAccessLayer.Model.Blog
@{
    ViewData["Title"] = "Create Blog";
}

<h1>Create your blog</h1>

<form asp-action="Create" method="post">
    @Html.AntiForgeryToken()

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="mb-3">
        <label asp-for="Name" class="form-label"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div class="mb-3">
    <label asp-for="Description" class="form-label"></label>
    <textarea asp-for="Description"
              class="form-control"
              rows="4"
              maxlength="1000"
              placeholder="Tell readers what this blog is about…"></textarea>
    <span asp-validation-for="Description" class="text-danger"></span>

    <!-- Live counter output -->
    <small id="descCounter" class="text-muted d-block mt-1"></small>
</div>

    <!-- Tag System -->
    <div class="form-group position-relative mb-3">
        <label asp-for="Tags" class="form-label">Tags</label>
        <input type="text" id="tagInput" class="form-control" placeholder="Search tags..." autocomplete="off" />
        <div id="tagSuggestions" class="autocomplete-items"></div>

        <div id="tagCheckboxes" class="mt-2">
            @if (ViewBag.AllTags is List<DataAccessLayer.Model.Tag> allTags && allTags != null)
            {
                foreach (var tag in allTags)
                {
                    <label class="form-check d-block">
                        <input type="checkbox" name="SelectedTagIDs" value="@tag.TagID" class="form-check-input" />
                        <span class="form-check-label">@tag.Name</span>
                    </label>
                }
            }
        </div>
        <small class="text-muted">Select tags that describe your blog</small>
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
    <a asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
        <script src="~/js/TagSearchHandling.js" defer></script>
    }

            <script> // Helpful counter code from ChatGPT
                (function () {
                    var ta = document.getElementById('Description');
                    var counter = document.getElementById('descCounter');
                    if (!ta || !counter) return;

                    // Prefer maxlength, fall back to data-val-length-max, then 1000
                    function getMax() {
                        var attr = ta.getAttribute('maxlength');
                        if (attr) return parseInt(attr);
                        var dataMax = ta.getAttribute('data-val-length-max');
                        if (dataMax) return parseInt(dataMax);
                        return 1000;
                    }

                    var max = getMax();

                    function update() {
                        var len = (ta.value || '').length;
                        counter.textContent = len + ' / ' + max + ' characters';
                        // Optional: color hint when near/over limit
                        if (len > max) {
                            counter.classList.add('text-danger');
                        } else {
                            counter.classList.remove('text-danger');
                        }
                    }

                    ta.addEventListener('input', update);
                    update(); // set initial value on page load
                })();
            </script>
}
