@model DataAccessLayer.Model.Blog
@{
    ViewData["Title"] = "Edit Blog";
}

<h1>Edit Blog</h1>

<form asp-action="Edit" method="post">
    @Html.AntiForgeryToken()

    <!-- /!\ keep the key so the POST knows which row to update /!\ -->
    <input type="hidden" asp-for="BlogId" />

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="mb-3">
        <label asp-for="Name" class="form-label"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div class="mb-3">
    <label asp-for="Description" class="form-label"></label>
    <textarea asp-for="Description"
              class="form-control"
              rows="4"
              maxlength="1000"
              placeholder="Tell readers what this blog is about…"></textarea>
    <span asp-validation-for="Description" class="text-danger"></span>

    <!-- Live counter output -->
    <small id="descCounter" class="text-muted d-block mt-1"></small>
</div>

    <div class="mb-3">
        <label class="form-label">Tags</label>
        <div class="form-check-container">
            @foreach (var tag in (List<DataAccessLayer.Model.Tag>)ViewBag.Tags)
            {
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" name="selectedTags" value="@tag.TagID" id="tag@(tag.TagID)" 
                           @(Model.Tags.Any(t => t.TagID == tag.TagID) ? "checked" : "") />
                    <label class="form-check-label" for="tag@(tag.TagID)">
                        @tag.Name
                    </label>
                </div>
            }
        </div>
        <small class="text-muted">Select tags that describe your blog</small>
    </div>


    <button type="submit" class="btn btn-primary">Save</button>
    <a asp-action="Details" asp-route-id="@Model.BlogId" class="btn btn-secondary">Cancel</a>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
     
        <script> // Helpful counter code from ChatGPT
            (function () {
                var ta = document.getElementById('Description');
                var counter = document.getElementById('descCounter');
                if (!ta || !counter) return;

                // Prefer maxlength, fall back to data-val-length-max, then 1000
                function getMax() {
                    var attr = ta.getAttribute('maxlength');
                    if (attr) return parseInt(attr);
                    var dataMax = ta.getAttribute('data-val-length-max');
                    if (dataMax) return parseInt(dataMax);
                    return 1000;
                }

                var max = getMax();

                function update() {
                    var len = (ta.value || '').length;
                    counter.textContent = len + ' / ' + max + ' characters';
                    // Optional: color hint when near/over limit
                    if (len > max) {
                        counter.classList.add('text-danger');
                    } else {
                        counter.classList.remove('text-danger');
                    }
                }

                ta.addEventListener('input', update);
                update(); // set initial value on page load
            })();
        </script>
}
